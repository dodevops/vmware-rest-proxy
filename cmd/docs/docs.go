// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "DO!DevOps",
            "url": "http://dodevops.io",
            "email": "info@dodevops.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/datastores": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Fetches a list of registered datastores in the vCenter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datastore"
                ],
                "summary": "Retrieve a list of datastores",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.Datastores"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Authorization is required"
                    }
                }
            }
        },
        "/hosts": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Fetches a list of registered ESXi hosts in the vCenter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "host"
                ],
                "summary": "Retrieve a list of ESXi hosts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.Hosts"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Authorization is required"
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Just responses with a 200 to signal that the service is running",
                "produces": [
                    "application/json"
                ],
                "summary": "Checks whether the service is running",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.Status"
                        }
                    }
                }
            }
        },
        "/vms": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Fetches a list of vms from the vCenter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vm"
                ],
                "summary": "Retrieve a list of all vms",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.VMS"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Authorization is required"
                    }
                }
            }
        },
        "/vms/{id}/fqdn": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Try to find out the fqdn of the given VM using the guest tools",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vm"
                ],
                "summary": "Get fqdn of VM",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of VM",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.FQDN"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Authorization is required"
                    }
                }
            }
        },
        "/vms/{id}/info": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Find out some information about a VM and return them",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vm"
                ],
                "summary": "Get informational data about a VM",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of VM",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VMInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Authorization is required"
                    }
                }
            }
        },
        "/vms/{id}/tags": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieve tags  and their categories for a vm",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vm"
                ],
                "summary": "Retrieve tags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of VM",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.Tags"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Authorization is required"
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Datastore": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "datastore": {
                    "type": "string"
                },
                "free_space": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "api.Host": {
            "type": "object",
            "properties": {
                "connection_state": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "power_state": {
                    "type": "string"
                }
            }
        },
        "api.VM": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "power_state": {
                    "type": "string"
                },
                "vm": {
                    "type": "string"
                }
            }
        },
        "api.VMInfo": {
            "type": "object",
            "properties": {
                "cpu_cores": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "provisioned_ram": {
                    "type": "integer"
                },
                "provisioned_storage": {
                    "type": "integer"
                },
                "used_storage": {
                    "type": "integer"
                }
            }
        },
        "api.VMTag": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category holds the tag category",
                    "type": "string"
                },
                "value": {
                    "description": "Value holds the value of the tag",
                    "type": "string"
                }
            }
        },
        "endpoints.Datastores": {
            "type": "object",
            "properties": {
                "datastores": {
                    "$ref": "#/definitions/endpoints.DatastoresResult"
                }
            }
        },
        "endpoints.DatastoresResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "datastores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Datastore"
                    }
                }
            }
        },
        "endpoints.FQDN": {
            "type": "object",
            "properties": {
                "fqdn": {
                    "type": "string"
                }
            }
        },
        "endpoints.Hosts": {
            "type": "object",
            "properties": {
                "hosts": {
                    "$ref": "#/definitions/endpoints.HostsResult"
                }
            }
        },
        "endpoints.HostsResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Host"
                    }
                }
            }
        },
        "endpoints.Status": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "endpoints.Tags": {
            "type": "object",
            "properties": {
                "tags": {
                    "$ref": "#/definitions/endpoints.TagsResult"
                }
            }
        },
        "endpoints.TagsResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VMTag"
                    }
                }
            }
        },
        "endpoints.VMS": {
            "type": "object",
            "properties": {
                "vms": {
                    "$ref": "#/definitions/endpoints.VMSResult"
                }
            }
        },
        "endpoints.VMSResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "vms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VM"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "vmware-rest-proxy",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
